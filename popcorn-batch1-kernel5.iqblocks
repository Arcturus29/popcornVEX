{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">kernels</variable></variables><block type=\"iq_events_when_started\" id=\"99$h`PQ8V$Wefrtt3$o6\" x=\"230\" y=\"10\"><next><block type=\"iq_variables_set_variable\" id=\",5w.GA2+HSR4*D6}Izqz\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">kernels</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"2r[0A[PxOmj?_=jplpPp\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\");tP_2,|T]PA);{SSFL=\"><field name=\"MOTOR\">MotorGroup2</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"UCzs4suCvJFgh+Ej*.cd\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"rhzw#1t9?*v?.+rAB?0j\"><field name=\"MOTOR\">Motor3</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"a.TkxzCr16)r!p|mYh9/\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"SXhTjt?9Nw~{aS,gxtYx\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Ty5bK#5XWMv~X#6)/s-P\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"7xKyZk7A#t)|lhkT[T0]\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"=oEL$o)OF|BJ2cmc@tr]\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\")=X#l1jG8TYFF%8+_jHm\"><field name=\"MOTOR\">MotorGroup2</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"[})9zSW,[wcz`Kd#*]=6\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\":NVX2FHsMJ%qi_8R$9m+\"><field name=\"MOTOR\">Motor3</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"[[+_qhl,ZFpH;$6/DU?r\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"u,|+toxJhQsv7QnY}*i+\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"8Qq?Nt/k}8?`XTVRKT.T\"><field name=\"TEXT\">popcorn (kernel 5, batch 1)</field></shadow></value><next><block type=\"iq_sounds_play_note\" id=\"L[/[%MwoC5B13y[=?;02\"><field name=\"NOTE\">0</field><field name=\"DURATION\">4</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"yL^8N/l^GX)e~%s$zo85\" x=\"190\" y=\"550\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_variables_change_variable\" id=\"Y$x)#i5J7*J6pa9bqpFx\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">kernels</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\":OC|@y?V@yk`8!M/MXKa\"><field name=\"NUM\">10</field></shadow></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"!Y=eQ.3ima+fF3JMTiu;\" x=\"570\" y=\"550\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_variables_change_variable\" id=\"jKt5ow,dDUMIP9QsE_!4\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">kernels</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"0j,+~`w@*K9q-6nIUgiW\"><field name=\"NUM\">-10</field></shadow></value></block></next></block><block type=\"iq_events_when_started\" id=\"CQqB=Vrg)GaK/Yy_$CnO\" x=\"370\" y=\"890\"><next><block type=\"iq_control_forever\" id=\"[3WHD!dJjEV-eFss3Yli\"><statement name=\"SUBSTACK\"><block type=\"iq_drivetrain_set_drive_velocity\" id=\"Ch%MYA*aj^q[C8qz-8cR\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"4:8(TEDh1rH6mUh#zB8b\"><field name=\"NUM\">50</field></shadow><block type=\"iq_variables_variable\" id=\"dTj$n;VTjS[@lsHXNVfo\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">kernels</field></block></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"#Xg%K^xm#2$-1uBl%AN6\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"I6ZFe9-661a~=iVzOP11\"><field name=\"NUM\">50</field></shadow><block type=\"iq_variables_variable\" id=\"YZ|_jXhHX2FGixiulsq4\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">kernels</field></block></value></block></next></block></statement></block></next></block><block type=\"iq_operator_equal_to\" id=\"@|@(o{$@}`AJTW61$CBf\" x=\"390\" y=\"1250\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"g.6;F4VuTDSsG+19)wp:\"><field name=\"NUM\">0</field></shadow></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"c+dnZZO5B:m;h0jVe?mc\"><field name=\"NUM\">50</field></shadow><block type=\"iq_sensing_drive_velocity\" id=\"N)yyo4qgn97YR$rH]1fk\"><field name=\"UNITS\">pct</field></block></value></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"MotorGroup2","rightDir":"false","e":"","eDir":"false","f":"Motor3","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[1,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[2,11],"name":"MotorGroup2","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"Motor3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":6,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\nmotor MotorGroup2MotorA = motor(PORT2, false);\nmotor MotorGroup2MotorB = motor(PORT11, true);\nmotor_group MotorGroup2 = motor_group(MotorGroup2MotorA, MotorGroup2MotorB);\n\nmotor Motor3 = motor(PORT3, false);\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool fButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonRUp/ButtonRDown status to control MotorGroup2\n      if (Controller.ButtonRUp.pressing()) {\n        MotorGroup2.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        MotorGroup2.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        MotorGroup2.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonFUp/ButtonFDown status to control Motor3\n      if (Controller.ButtonFUp.pressing()) {\n        Motor3.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        Motor3.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        Motor3.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat kernels;\n\n// \"when started\" hat block\nint whenStarted1() {\n  kernels = 100.0;\n  MotorGroup2.setVelocity(100.0, percent);\n  Motor3.setVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  MotorGroup2.setMaxTorque(100.0, percent);\n  Motor3.setMaxTorque(100.0, percent);\n  Brain.Screen.print(\"popcorn (kernel 5, batch 1)\");\n  Brain.playNote(3, 0, 1000);\n  return 0;\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  kernels = kernels + 10.0;\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  kernels = kernels + -10.0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  while (true) {\n    Drivetrain.setDriveVelocity(kernels, percent);\n    Drivetrain.setTurnVelocity(kernels, percent);\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  // register event handlers\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}